#!/usr/bin/env ruby
Encoding.default_internal = Encoding::UTF_8
Encoding.default_external = Encoding::UTF_8

require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: process_service_descriptions [-p]'

  opts.on('-p', '--profile', 'Enable profiling') do |p|
    options[:profile] = true
  end

  opts.on('-d', '--dynamic', 'Fetch dynamic data') do |m|
    options[:dynamic] = true
  end
end.parse!

if options[:profile]
  require 'ruby-prof'

  RubyProf.start
end

gem 'sdl-ng'

require 'sdl'
require 'active_support'
require 'i18n'

unless options[:dynamic]
  SDL::Receivers::TypeInstanceReceiver.class_eval do
    def dynamic
      nil
    end
  end
end

# Make the translations for fact classes, instances, etc. known to the I18n framework
I18n.load_path << File.join(Dir.pwd, 'translations', 'en.yml')

# Create an empty service compendium
compendium = SDL::Base::ServiceCompendium.new

# Load SDL
compendium.load_vocabulary_from_path(Dir.pwd)
compendium.register_classes_globally

puts "Loaded vocabulary with #{Type.subtypes_recursive.drop(2).count} types, #{Service.properties.count} service properties and #{compendium.type_instances.values.map(&:count).sum} type instances."

# Load mappers
Dir["rdf_mappers/*.rb"].each do |file|
  load file

  puts "Loaded RDF mapper from file #{file}"
end

# Load Service Definitions
compendium.load_service_from_path(Dir.pwd)
puts "Loaded Service Compendium with #{compendium.services.count} services. Generating output"

%w[xml rdf html json].each do |directory| FileUtils.mkdir_p File.join(Dir.pwd, 'output', directory) end

xsd_schema_exporter = SDL::Exporters::XSDSchemaExporter.new(compendium)
xsd_simple_schema_exporter = SDL::Exporters::XSDSimpleSchemaExporter.new(compendium)
html_schema_exporter = SDL::Exporters::HTML::HTMLExporter.new(compendium)
service_exporter = SDL::Exporters::XMLServiceExporter.new(compendium)
rdf_exporter = SDL::Exporters::RDFExporter.new(compendium)
json_exporter = SDL::Exporters::JSONExporter.new(compendium)

xsd_schema_path = Dir.pwd + '/output/xml/schema.xsd'
xsd_schema_exporter.export_schema_to_file(xsd_schema_path)
puts "Written Service Compendium XSD schema into #{xsd_schema_path}"

xsd_simple_schema_path = Dir.pwd + '/output/xml/schema_simple.xsd'
xsd_simple_schema_exporter.export_schema_to_file(xsd_simple_schema_path)
puts "Written Service Compendium simple XSD schema into #{xsd_simple_schema_path}"

html_schema_path = Dir.pwd + '/output/html/schema.html'
html_schema_exporter.export_schema_to_file(html_schema_path)
puts "Written Service Compendium HTML schema into #{html_schema_path}"

compendium.services.each do |name, service|
  xml_output_file = Dir.pwd + "/output/xml/#{name}.xml"
  service_exporter.export_service_to_file service, xml_output_file
  puts "Wrote XML export of service '#{name}' to #{xml_output_file}"

  rdf_output_file = Dir.pwd + "/output/rdf/#{name}.rdf"
  rdf_exporter.export_service_to_file service, rdf_output_file
  puts "Wrote RDF export of service '#{name}' to #{rdf_output_file}"

  json_output_file = Dir.pwd + "/output/json/#{name}.json"
  json_exporter.export_service_to_file service, json_output_file
  puts "Wrote JSON export of service '#{name}' to #{json_output_file}"
end

all_needed_translations = {
    'en' => {
        'sdl' => I18n.backend.instance_eval{translations}[:en][:sdl]
    }
}

def returning(value)
  yield(value)
  value
end

def convert_hash_to_ordered_hash_and_sort(object, deep = false)
# from http://seb.box.re/2010/1/15/deep-hash-ordering-with-ruby-1-8/
  if object.is_a?(Hash)
    # Hash is ordered in Ruby 1.9!
    res = returning(RUBY_VERSION >= '1.9' ? Hash.new : ActiveSupport::OrderedHash.new) do |map|
      object.each {|k, v| map[k] = deep ? convert_hash_to_ordered_hash_and_sort(v, deep) : v }
    end
    return res.class[res.sort {|a, b| a[0].to_s <=> b[0].to_s } ]
  elsif deep && object.is_a?(Array)
    array = Array.new
    object.each_with_index {|v, i| array[i] = convert_hash_to_ordered_hash_and_sort(v, deep) }
    return array
  else
    return object
  end
end

translations_output_file = Dir.pwd + "/translations/en.out.yml"
File.open(translations_output_file, 'w') do |f|
  f.write(convert_hash_to_ordered_hash_and_sort(all_needed_translations.deep_stringify_keys!, true).to_yaml)
  puts "Wrote resulting translations file to #{translations_output_file}."
end

puts 'Finished'

if options[:profile]
  RubyProf::CallTreePrinter.new(RubyProf.stop).print(File.new('profile.kcachegrind', 'w'), {})
end