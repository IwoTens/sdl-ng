#!/usr/bin/env ruby
gem 'sdl-ng'

require 'sdl'
require 'active_support'
require 'i18n'

# Make the translations for fact classes, instances, etc. known to the I18n framework
I18n.load_path << File.join(Dir.pwd, 'translations', 'en.yml')

# Create an empty service compendium
compendium = SDL::Base::ServiceCompendium.new

# Load SDL
Dir.glob(File.join(Dir.pwd, '**', '*.sdl.rb')) do |filename|
  compendium.facts_definition do
    eval(File.read(filename), binding, filename)
  end
end

compendium.register_classes_globally

# Load Service Definitions
Dir.glob(File.join(Dir.pwd, '**', '*.service.rb')) do |filename|
  service = compendium.service filename.match(%r[.+/(.+).service.rb])[1] do
    eval(File.read(filename), binding, filename)
  end
end

puts "Loaded Service Compendium with #{compendium.services.count} services. Generating output"

%w[xml rdf markdown].each do |directory| FileUtils.mkdir_p File.join(Dir.pwd, 'output', directory) end

schema_exporter = SDL::Exporters::XSDSchemaExporter.new(compendium)
service_exporter = SDL::Exporters::XMLServiceExporter.new(compendium)
markdown_exporter = SDL::Exporters::MarkdownServiceExporter.new(compendium)
rdf_exporter = SDL::Exporters::RDFExporter.new(compendium)

schema_dir = Dir.pwd + '/output/xml/schema.xsd'
File.open(schema_dir, 'w') {|f|
  f.write(schema_exporter.export_schema)
  puts "Written Service Compendium XSD schema into #{schema_dir}"
}

compendium.services.each do |name, service|
  xml_output_file = Dir.pwd + "/output/xml/#{name}.xml"
  service_exporter.export_service_to_file service, xml_output_file
  puts "Wrote XML export of service '#{name}' to #{xml_output_file}"

  rdf_output_file = Dir.pwd + "/output/rdf/#{name}.rdf"
  rdf_exporter.export_service_to_file service, rdf_output_file
  puts "Wrote RDF export of service '#{name}' to #{rdf_output_file}"
end

all_needed_translations = {
    'en' => {
        'sdl' => I18n.backend.instance_eval{translations}[:en][:sdl]
    }
}

def returning(value)
  yield(value)
  value
end

def convert_hash_to_ordered_hash_and_sort(object, deep = false)
# from http://seb.box.re/2010/1/15/deep-hash-ordering-with-ruby-1-8/
  if object.is_a?(Hash)
    # Hash is ordered in Ruby 1.9!
    res = returning(RUBY_VERSION >= '1.9' ? Hash.new : ActiveSupport::OrderedHash.new) do |map|
      object.each {|k, v| map[k] = deep ? convert_hash_to_ordered_hash_and_sort(v, deep) : v }
    end
    return res.class[res.sort {|a, b| a[0].to_s <=> b[0].to_s } ]
  elsif deep && object.is_a?(Array)
    array = Array.new
    object.each_with_index {|v, i| array[i] = convert_hash_to_ordered_hash_and_sort(v, deep) }
    return array
  else
    return object
  end
end

translations_output_file = Dir.pwd + "/translations/en.out.yml"
File.open(translations_output_file, 'w') do |f|
  f.write(convert_hash_to_ordered_hash_and_sort(all_needed_translations.deep_stringify_keys!, true).to_yaml)
  puts "Wrote resulting translations file to #{translations_output_file}."
end

puts 'Finished'